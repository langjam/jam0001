type program(info: interval, forms: list<form>)

type pattern =
  | word(info: interval, word: text)
  | anything(info: interval)

type form =
  | rule(info: interval, arity: text, pattern: pattern, replacement: list<expression>)
  | variable(info: interval, name: text)
  | number(info: interval, digits: text)
  | atom(info: interval, contents: text)
  | string(info: interval, contents: text)
  | block(info: interval, expressions: list<expression>)
  | matched(info: interval)
  | remaining(info: interval)
  | text(info: interval, contents: text)

type pair(first: any, second: any)

grammar Belle : program {
  program =
    | xs:form* end -> program(meta, xs)

  form =
    | x:special_form                                                    -> x
    | e:expr                                                            -> e
    | t:text_piece                                                      -> t
    | x:any                                                             -> form.text(meta, x)

  text_piece =
    | basic_text_piece
    | s:horizontal_spaces                                               -> form.text(meta, s)
    | n:newline                                                         -> form.text(meta, n)

  basic_text_piece =
    | "\\" x:any                                                        -> form.text(meta, x)
    | w:word                                                            -> form.text(meta, w)
    | p:punctuation                                                     -> form.text(meta, p)

  special_form =
    | id<":rule"> p:ws<rule_pattern> ws<"="> e:ws<expr_block> space* "." s newline -> form.rule(meta, p.second, p.first, e)

  rule_pattern =
    | p:pattern space* "/" space* a:number -> pair(p, a)

  pattern =
    | id<"<any>">  -> pattern.anything(meta)
    | w:word       -> pattern.word(meta, w)

  expr =
    | "%" w:word                          -> form.variable(meta, w)
    | "#" n:number                        -> form.number(meta, n)
    | "#" w:word                          -> form.atom(meta, w)
    | s:string                            -> form.string(meta, s)
    | id<"^rest">                         -> form.remaining(meta)
    | id<"^self">                         -> form.matched(meta)
    | ~"." t:basic_text_piece             -> t
    | "[" space* e:expr_block space* "]"  -> form.block(meta, e)
  
  expr_block =
    | listOf<expr, space+>

  // -- Lexical stuff  
  token word =
    | "@"? (letter | digit | "-" | "_")+
  
  token number =
    | digit+

  string =
    | "\"" x:string_chars "\"" -> x
  
  token string_chars =
    | "\\" any
    | (~"\"" any)*

  token newline =
    | "\r\n"
    | "\r"
    | "\n"

  token horizontal_space =
    | " "
    | "\t"

  token s = horizontal_space*

  token horizontal_spaces = horizontal_space+

  token punctuation =
    | "." | "," | "!" | "?" | "," | ";" | "(" | ")" | "-"

  id<word> = x:word ~(letter | digit | "-" | "_") -> x
  ws<pattern> = space+ x:pattern -> x
}