extend_syntax
    DefaultSeparator ::= /((?s:\s|#[^\n|][^\n]*|#\|.*?\|#)*)/ ;
in
    # Now we've got comments!
    # This builds up a sort-of useable language in Unseemly.
    # See `worked_example.unseemly` for a similar process,
    #  but with detailed explanations.
extend_syntax
    ### Introduce `let` expressions.
    Expr ::=also
        forall T S . '{ [
            lit ,{ DefaultToken }, = 'let'
            [
                pat := ( ,{ Pat<S> }, )
                lit ,{ DefaultToken }, = '='
                val := ( ,{ Expr<S> }, )
                lit ,{ DefaultToken }, = ';'
            ] *
            lit ,{ DefaultToken }, = 'in'
            body := ( ,{ Expr<T> }, <-- ...[pat = val]... )
        ] }' let_macro -> .{
            '[Expr |
                match **[...[,val, >> ,[val], ]... ]**
                    { **[...[,pat, >> ,[pat],]... ]** => ,[body], } ]'
        }. ;
in
extend_syntax
    ### Introduce `for` loops
    Expr ::=also forall T . '{ [
        lit ,{ DefaultToken }, = 'for'
        pat := ( ,{ Pat<T> }, )
        lit ,{ DefaultToken }, = 'in'
        seq := ( ,{ Expr<Sequence<T>> }, )
        # This uses `:` instead of `=`, because `T` is a type.
        # `body` returns `Unit`; it's just being invoked for side-effects.
        body := ( ,{ Expr<Unit> }, <-- pat : T )
    ] }' for_loop -> .{
        '[Expr |
            (foldl ,[seq],
                **[]**
                # Interpolation into atom positions doesn't work yet,
                #  so we use `let` to interpolate a pattern.
                .[unit : Unit  arg : ,[prefab_type T], .
                    let ,[pat], = arg ; in ,[body],
                ]. )
        ]'
    }. ;
in
extend_syntax
  Expr ::=also forall T . '{
      [
          lit ,{ DefaultToken }, = 'if'
          cond := ( ,{ Expr< Bool > }, )
          lit ,{ DefaultToken }, = 'then'
          then_e := ( ,{ Expr< T > }, )
          lit ,{ DefaultToken }, = 'else'
          else_e := ( ,{ Expr< T > }, )
      ]
  }' conditional -> .{
      '[Expr | match ,[cond], {
                +[True]+ => ,[then_e],
                +[False]+ => ,[else_e], } ]' }. ;
in
capture_language