?start: repl

repl: temps? exprs

?exprs: expr ("." expr)* "."?

?expr: assign

?assign: word ":=" assign | send

?send: keyword
?keyword: binary [keypairs cascades?]
keypairs: keypair+
keypair: kw binary
cascades: (";" keypairs)+
?binary: [binary op] unary
?unary: unary word | primary

?primary: array | block | map | scalar | number | string | symbol | word

array: "@{" primary* "}"

block: "[" params? temps? exprs "]"
params:  param+ "|"
temps: "|" word+ "|"

map: "%{" mappair* "}"
mappair: kw primary

scalar: "${" expr "}"

kw: KEYWORD
KEYWORD: WORD ":"

number: NUMBER
NUMBER: DIGIT+ ["." DIGIT+]

op: OP
OP: ("~"|"@"|"%"|"&"|"*"|"-"|"="|"+"|"\\"|"|"|","|"<"|">"|"/"|"?")+

param: PARAM
PARAM: ":" WORD

string: STRING
STRING: "'" _STRING_ESC_INNER "'"

symbol: SYMBOL
SYMBOL: "#" WORD

word: WORD

%import common._STRING_ESC_INNER 
%import common.DIGIT
%import common.WORD
%import common.WS

%ignore WS