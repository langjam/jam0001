fn main() {
    generate_docs();
}

# Prints out markdown containing a list of every globally defined function,
# including comments above the function if there are any.
fn generate_docs() {
    let source = program_source();
    let previous_comment = nil;
    for item in source {
        if let code: Code = item {
            let name = get_def_name(code);
            if name != nil {
                println();
                println("### Function `", name, "`");
                if previous_comment != nil {
                    let cleaned_up = cleanup_comment(previous_comment.text);
                    println();
                    println(cleaned_up);
                }
                println();
                println("---");
            }
            previous_comment = nil;
        } else if let comment: Comment = item {
            previous_comment = comment;
        } else {
            panic("expected code or comment");
        }
    }
}

# Returns function name if given code is a function definition,
# or nil otherwise.
fn get_def_name(code) {
    let text = trim_start(code.text);
    if starts_with(text, "fn") {
        let rest = trim_start(text.substring(2, text.len - 2));
        return extract_identifier(rest);
    } else {
        return nil;
    }
}

# Returns the identifier a string starts with.
# Assumes that the identifier ends with a space or parenthesis.
fn extract_identifier(text) {
    let idx = 0;
    while idx < text.len && text.get(idx) != " " && text.get(idx) != "(" {
        idx = idx + 1;
    }
    return text.substring(0, idx);
}

# Removes '#' from each line and cleans up whitespace.
fn cleanup_comment(text) {
    let lines = split_lines(text);
    let result = List();
    for line in lines {
        line = trim_end(line);
        line = trim_start(line);
        line = remove_prefix(line, "#");
        line = trim_start(line);
        result.push(line);
        result.push("\n");
    }
    return Str(result);
}

# Removes spaces from the start of the string.
fn trim_start(text) {
    let idx = 0;
    while idx < text.len && text.get(idx) == " " {
        idx = idx + 1;
    }
    return text.substring(idx, text.len - idx);
}

# Removes spaces from the start of the string.
fn trim_end(text) {
    let idx = text.len;
    while idx - 1 >= 0 && text.get(idx - 1) == " " {
        idx = idx - 1;
    }
    return text.substring(0, idx);
}

# Splits string into a list of lines
fn split_lines(text) {
    let lines = List();
    let last_start = 0;
    let idx = 0;
    while idx < text.len {
        if text.get(idx) == "\n" {
            let line = text.substring(last_start, idx - last_start);
            lines.push(line);
            last_start = idx + 1;
        }
        idx = idx + 1;
    }
    return lines;
}

# Returns if `needle` is a prefix of `haystack`.
fn starts_with(haystack, needle) {
    if haystack.len < needle.len {
        return false;
    }
    let start = haystack.substring(0, needle.len);
    return start == needle;
}

# Removes all occurences of a given char from a string.
fn remove(text, to_remove) {
    let output = List();
    let idx = 0;
    while idx < text.len {
        let ch = text.get(idx);
        if ch != to_remove {
            output.push(ch);
        }
        idx = idx + 1;
    }
    return Str(output);
}

# Removes prefix from the string if it starts with the
# prefix, leaves the text unchanged otherwise.
fn remove_prefix(text, prefix) {
    if starts_with(text, prefix) {
        return text.substring(prefix.len, text.len - prefix.len);
    } else {
        return text;
    }
}

main();
