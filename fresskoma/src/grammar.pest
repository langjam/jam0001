WHITESPACE = _{ " " | NEWLINE }

comment_outer = _{ "<" ~ comment ~ ">" }
comment = @{ (!">" ~ ANY)* }

identifier = @{ (ASCII_ALPHANUMERIC | "_")+ }
integer = @{ ("+" | "-")? ~ ASCII_DIGIT+ }
string = @{ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

function_call = { identifier ~ "(" ~ argument_list? ~ ")" }

value = _{ integer | string | function_call }
assignment = { "let " ~ identifier ~ "=" ~ expression }
meta_property_access = ${ identifier ~ ".$" ~ identifier }

//argument = { comment? ~ (meta_property_access | function_call | identifier) }
expression_list = _{ expression ~ ("," ~ expression)+ }
argument_list = { (expression_list | expression) ~ ","? }

// we'll define 'expressions' as something that can return a value when evaluated (e.g. function call), and
// a 'statement' as anything which can be evaluated but does not return a value (e.g. function definition)
//
// Wikipedia: In computer science, an expression is a syntactic entity in a programming language that may be evaluated
//            to determine its value. [...] Expression is often contrasted with statementâ€”a syntactic entity
//            that has no value (an instruction).
expression = { comment_outer? ~ (function_call | meta_property_access | string | integer | identifier) }
statement = { comment_outer? ~ (function_definition | assignment) }

function_definition = {
    comment_outer? ~
    "fn " ~ identifier ~
    "(" ~ argument_list? ~ ")" ~
    "{" ~ (statement | expression)* ~ "}"
}


file = _{
    SOI ~
    (statement | expression)* ~
    EOI
}
